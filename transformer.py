# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'simple_app.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from base64 import b16decode, b16encode, b32decode, b32encode, b64decode, b64encode, b85decode, b85encode
from base58 import b58encode, b58decode
from hashlib import sha256, sha384, sha512, sha3_256, sha3_384, sha3_512, blake2s, blake2b, md5
from cryptography.fernet import Fernet
from time import sleep
import urllib.parse
from string import ascii_letters, digits, punctuation
from random import choice


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1078, 609)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(Dialog)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.tabWidget = QtWidgets.QTabWidget(Dialog)
        self.tabWidget.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.tabWidget.setObjectName("tabWidget")
        self.convertTab = QtWidgets.QWidget()
        self.convertTab.setObjectName("convertTab")
        self.formLayout = QtWidgets.QFormLayout(self.convertTab)
        self.formLayout.setObjectName("formLayout")
        self.convertInputField = QtWidgets.QPlainTextEdit(self.convertTab)
        self.convertInputField.setObjectName("convertInputField")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.SpanningRole, self.convertInputField)
        self.label_14 = QtWidgets.QLabel(self.convertTab)
        self.label_14.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_14.setObjectName("label_14")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_14)
        self.label = QtWidgets.QLabel(self.convertTab)
        self.label.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label.setObjectName("label")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.label)
        self.gridLayout_8 = QtWidgets.QGridLayout()
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.convertInputList = QtWidgets.QComboBox(self.convertTab)
        self.convertInputList.setObjectName("convertInputList")
        self.convertInputList.addItem("")
        self.convertInputList.addItem("")
        self.convertInputList.addItem("")
        self.convertInputList.addItem("")
        self.convertInputList.addItem("")
        self.gridLayout_8.addWidget(self.convertInputList, 0, 0, 1, 1)
        self.convertOutputList = QtWidgets.QComboBox(self.convertTab)
        self.convertOutputList.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.convertOutputList.setObjectName("convertOutputList")
        self.convertOutputList.addItem("")
        self.convertOutputList.addItem("")
        self.convertOutputList.addItem("")
        self.convertOutputList.addItem("")
        self.convertOutputList.addItem("")
        self.gridLayout_8.addWidget(self.convertOutputList, 0, 1, 1, 1)
        self.formLayout.setLayout(2, QtWidgets.QFormLayout.SpanningRole, self.gridLayout_8)
        self.convertButton = QtWidgets.QPushButton(self.convertTab)
        self.convertButton.setFocusPolicy(QtCore.Qt.NoFocus)
        self.convertButton.setObjectName("convertButton")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.SpanningRole, self.convertButton)
        self.convertOutputField = QtWidgets.QPlainTextEdit(self.convertTab)
        self.convertOutputField.setReadOnly(True)
        self.convertOutputField.setOverwriteMode(True)
        self.convertOutputField.setObjectName("convertOutputField")
        self.formLayout.setWidget(5, QtWidgets.QFormLayout.SpanningRole, self.convertOutputField)
        self.conversionErrorsLabel = QtWidgets.QLabel(self.convertTab)
        self.conversionErrorsLabel.setEnabled(True)
        self.conversionErrorsLabel.setAutoFillBackground(False)
        self.conversionErrorsLabel.setInputMethodHints(QtCore.Qt.ImhNone)
        self.conversionErrorsLabel.setText("")
        self.conversionErrorsLabel.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)
        self.conversionErrorsLabel.setObjectName("conversionErrorsLabel")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.SpanningRole, self.conversionErrorsLabel)
        self.tabWidget.addTab(self.convertTab, "")
        self.cipherTab = QtWidgets.QWidget()
        self.cipherTab.setObjectName("cipherTab")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.cipherTab)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.cipherInputField = QtWidgets.QPlainTextEdit(self.cipherTab)
        self.cipherInputField.setObjectName("cipherInputField")
        self.verticalLayout_3.addWidget(self.cipherInputField)
        self.gridLayout_7 = QtWidgets.QGridLayout()
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.label_2 = QtWidgets.QLabel(self.cipherTab)
        self.label_2.setObjectName("label_2")
        self.gridLayout_7.addWidget(self.label_2, 0, 0, 1, 1)
        self.cipherList = QtWidgets.QComboBox(self.cipherTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cipherList.sizePolicy().hasHeightForWidth())
        self.cipherList.setSizePolicy(sizePolicy)
        self.cipherList.setObjectName("cipherList")
        self.cipherList.addItem("")
        self.cipherList.addItem("")
        self.cipherList.addItem("")
        self.cipherList.addItem("")
        self.cipherList.addItem("")
        self.cipherList.addItem("")
        self.gridLayout_7.addWidget(self.cipherList, 0, 1, 1, 1)
        self.verticalLayout_3.addLayout(self.gridLayout_7)
        self.gridLayout_9 = QtWidgets.QGridLayout()
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.label_12 = QtWidgets.QLabel(self.cipherTab)
        self.label_12.setObjectName("label_12")
        self.gridLayout_9.addWidget(self.label_12, 0, 0, 1, 1)
        self.cipherKeyField = QtWidgets.QLineEdit(self.cipherTab)
        self.cipherKeyField.setDragEnabled(False)
        self.cipherKeyField.setClearButtonEnabled(True)
        self.cipherKeyField.setObjectName("cipherKeyField")
        self.gridLayout_9.addWidget(self.cipherKeyField, 0, 1, 1, 1)
        self.verticalLayout_3.addLayout(self.gridLayout_9)
        self.cipherErrorsLabel = QtWidgets.QLabel(self.cipherTab)
        self.cipherErrorsLabel.setText("")
        self.cipherErrorsLabel.setWordWrap(False)
        self.cipherErrorsLabel.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)
        self.cipherErrorsLabel.setObjectName("cipherErrorsLabel")
        self.verticalLayout_3.addWidget(self.cipherErrorsLabel)
        self.gridLayout_10 = QtWidgets.QGridLayout()
        self.gridLayout_10.setObjectName("gridLayout_10")
        self.cipherButton = QtWidgets.QPushButton(self.cipherTab)
        self.cipherButton.setFocusPolicy(QtCore.Qt.NoFocus)
        self.cipherButton.setObjectName("cipherButton")
        self.gridLayout_10.addWidget(self.cipherButton, 0, 0, 1, 1)
        self.decipherButton = QtWidgets.QPushButton(self.cipherTab)
        self.decipherButton.setFocusPolicy(QtCore.Qt.NoFocus)
        self.decipherButton.setObjectName("decipherButton")
        self.gridLayout_10.addWidget(self.decipherButton, 0, 1, 1, 1)
        self.verticalLayout_3.addLayout(self.gridLayout_10)
        self.cipherOutputField = QtWidgets.QPlainTextEdit(self.cipherTab)
        self.cipherOutputField.setReadOnly(True)
        self.cipherOutputField.setOverwriteMode(True)
        self.cipherOutputField.setCenterOnScroll(False)
        self.cipherOutputField.setObjectName("cipherOutputField")
        self.verticalLayout_3.addWidget(self.cipherOutputField)
        self.tabWidget.addTab(self.cipherTab, "")
        self.hashTab = QtWidgets.QWidget()
        self.hashTab.setObjectName("hashTab")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.hashTab)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.hashInputField = QtWidgets.QPlainTextEdit(self.hashTab)
        self.hashInputField.setObjectName("hashInputField")
        self.verticalLayout_4.addWidget(self.hashInputField)
        self.gridLayout_11 = QtWidgets.QGridLayout()
        self.gridLayout_11.setObjectName("gridLayout_11")
        self.hashFileLabel = QtWidgets.QLabel(self.hashTab)
        self.hashFileLabel.setObjectName("hashFileLabel")
        self.gridLayout_11.addWidget(self.hashFileLabel, 0, 0, 1, 1)
        self.hashFilePath = QtWidgets.QLineEdit(self.hashTab)
        self.hashFilePath.setDragEnabled(True)
        self.hashFilePath.setClearButtonEnabled(True)
        self.hashFilePath.setObjectName("hashFilePath")
        self.gridLayout_11.addWidget(self.hashFilePath, 0, 1, 1, 1)
        self.verticalLayout_4.addLayout(self.gridLayout_11)
        self.gridLayout_12 = QtWidgets.QGridLayout()
        self.gridLayout_12.setObjectName("gridLayout_12")
        self.label_4 = QtWidgets.QLabel(self.hashTab)
        self.label_4.setObjectName("label_4")
        self.gridLayout_12.addWidget(self.label_4, 0, 0, 1, 1)
        self.hashList = QtWidgets.QComboBox(self.hashTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.hashList.sizePolicy().hasHeightForWidth())
        self.hashList.setSizePolicy(sizePolicy)
        self.hashList.setObjectName("hashList")
        self.hashList.addItem("")
        self.hashList.addItem("")
        self.hashList.addItem("")
        self.hashList.addItem("")
        self.hashList.addItem("")
        self.hashList.addItem("")
        self.hashList.addItem("")
        self.hashList.addItem("")
        self.hashList.addItem("")
        self.hashList.addItem("")
        self.hashList.setItemText(9, "")
        self.gridLayout_12.addWidget(self.hashList, 0, 1, 1, 1)
        self.verticalLayout_4.addLayout(self.gridLayout_12)
        self.hashingErrorsLabel = QtWidgets.QLabel(self.hashTab)
        self.hashingErrorsLabel.setText("")
        self.hashingErrorsLabel.setObjectName("hashingErrorsLabel")
        self.verticalLayout_4.addWidget(self.hashingErrorsLabel)
        self.hashButton = QtWidgets.QPushButton(self.hashTab)
        self.hashButton.setFocusPolicy(QtCore.Qt.NoFocus)
        self.hashButton.setObjectName("hashButton")
        self.verticalLayout_4.addWidget(self.hashButton)
        self.hashOutputField = QtWidgets.QPlainTextEdit(self.hashTab)
        self.hashOutputField.setReadOnly(True)
        self.hashOutputField.setOverwriteMode(True)
        self.hashOutputField.setObjectName("hashOutputField")
        self.verticalLayout_4.addWidget(self.hashOutputField)
        self.tabWidget.addTab(self.hashTab, "")
        self.encodeTab = QtWidgets.QWidget()
        self.encodeTab.setObjectName("encodeTab")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.encodeTab)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.encodeInputField = QtWidgets.QPlainTextEdit(self.encodeTab)
        self.encodeInputField.setObjectName("encodeInputField")
        self.verticalLayout_2.addWidget(self.encodeInputField)
        self.gridLayout_14 = QtWidgets.QGridLayout()
        self.gridLayout_14.setObjectName("gridLayout_14")
        self.encodeFileLabel = QtWidgets.QLabel(self.encodeTab)
        self.encodeFileLabel.setObjectName("encodeFileLabel")
        self.gridLayout_14.addWidget(self.encodeFileLabel, 0, 0, 1, 1)
        self.encodeFilePath = QtWidgets.QLineEdit(self.encodeTab)
        self.encodeFilePath.setDragEnabled(True)
        self.encodeFilePath.setClearButtonEnabled(True)
        self.encodeFilePath.setObjectName("encodeFilePath")
        self.gridLayout_14.addWidget(self.encodeFilePath, 0, 1, 1, 1)
        self.verticalLayout_2.addLayout(self.gridLayout_14)
        self.gridLayout_16 = QtWidgets.QGridLayout()
        self.gridLayout_16.setObjectName("gridLayout_16")
        self.label_11 = QtWidgets.QLabel(self.encodeTab)
        self.label_11.setObjectName("label_11")
        self.gridLayout_16.addWidget(self.label_11, 0, 0, 1, 1)
        self.encodeOutputLineEdit = QtWidgets.QLineEdit(self.encodeTab)
        self.encodeOutputLineEdit.setObjectName("encodeOutputLineEdit")
        self.encodeOutputLineEdit.setClearButtonEnabled(True)
        self.gridLayout_16.addWidget(self.encodeOutputLineEdit, 0, 1, 1, 1)
        self.verticalLayout_2.addLayout(self.gridLayout_16)
        self.gridLayout_15 = QtWidgets.QGridLayout()
        self.gridLayout_15.setObjectName("gridLayout_15")
        self.label_5 = QtWidgets.QLabel(self.encodeTab)
        self.label_5.setObjectName("label_5")
        self.gridLayout_15.addWidget(self.label_5, 0, 0, 1, 1)
        self.encodeList = QtWidgets.QComboBox(self.encodeTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.encodeList.sizePolicy().hasHeightForWidth())
        self.encodeList.setSizePolicy(sizePolicy)
        self.encodeList.setObjectName("encodeList")
        self.encodeList.addItem("")
        self.encodeList.addItem("")
        self.encodeList.addItem("")
        self.encodeList.addItem("")
        self.encodeList.addItem("")
        self.encodeList.addItem("")
        self.gridLayout_15.addWidget(self.encodeList, 0, 1, 1, 1)
        self.verticalLayout_2.addLayout(self.gridLayout_15)
        self.encodingErrorsLabel = QtWidgets.QLabel(self.encodeTab)
        self.encodingErrorsLabel.setText("")
        self.encodingErrorsLabel.setObjectName("encodingErrorsLabel")
        self.verticalLayout_2.addWidget(self.encodingErrorsLabel)
        self.gridLayout_6 = QtWidgets.QGridLayout()
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.encodeButton = QtWidgets.QPushButton(self.encodeTab)
        self.encodeButton.setFocusPolicy(QtCore.Qt.NoFocus)
        self.encodeButton.setObjectName("encodeButton")
        self.gridLayout_6.addWidget(self.encodeButton, 0, 0, 1, 1)
        self.decodeButton = QtWidgets.QPushButton(self.encodeTab)
        self.decodeButton.setFocusPolicy(QtCore.Qt.NoFocus)
        self.decodeButton.setObjectName("decodeButton")
        self.gridLayout_6.addWidget(self.decodeButton, 0, 1, 1, 1)
        self.verticalLayout_2.addLayout(self.gridLayout_6)
        self.encodeOutputField = QtWidgets.QPlainTextEdit(self.encodeTab)
        self.encodeOutputField.setReadOnly(True)
        self.encodeOutputField.setOverwriteMode(True)
        self.encodeOutputField.setObjectName("encodeOutputField")
        self.verticalLayout_2.addWidget(self.encodeOutputField)
        self.tabWidget.addTab(self.encodeTab, "")
        self.fernetEncryptionTab = QtWidgets.QWidget()
        self.fernetEncryptionTab.setObjectName("fernetEncryptionTab")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.fernetEncryptionTab)
        self.verticalLayout.setObjectName("verticalLayout")
        self.gridLayout_13 = QtWidgets.QGridLayout()
        self.gridLayout_13.setObjectName("gridLayout_13")
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        self.verticalLayout.addLayout(self.gridLayout_13)
        self.fernetencryptGroupBox = QtWidgets.QGroupBox(self.fernetEncryptionTab)
        self.fernetencryptGroupBox.setEnabled(True)
        self.fernetencryptGroupBox.setInputMethodHints(QtCore.Qt.ImhHiddenText)
        self.fernetencryptGroupBox.setObjectName("fernetencryptGroupBox")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.fernetencryptGroupBox)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.fernetshowKeyField = QtWidgets.QLineEdit(self.fernetencryptGroupBox)
        self.fernetshowKeyField.setReadOnly(False)
        self.fernetshowKeyField.setClearButtonEnabled(True)
        self.fernetshowKeyField.setObjectName("fernetshowKeyField")
        self.gridLayout.addWidget(self.fernetshowKeyField, 0, 0, 1, 1)
        self.fernetgenerateKeyButton = QtWidgets.QPushButton(self.fernetencryptGroupBox)
        self.fernetgenerateKeyButton.setFocusPolicy(QtCore.Qt.NoFocus)
        self.fernetgenerateKeyButton.setObjectName("fernetgenerateKeyButton")
        self.gridLayout.addWidget(self.fernetgenerateKeyButton, 0, 1, 1, 1)
        self.verticalLayout_6.addLayout(self.gridLayout)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_7 = QtWidgets.QLabel(self.fernetencryptGroupBox)
        self.label_7.setObjectName("label_7")
        self.gridLayout_2.addWidget(self.label_7, 0, 0, 1, 1)
        self.fernetencryptFilePath = QtWidgets.QLineEdit(self.fernetencryptGroupBox)
        self.fernetencryptFilePath.setDragEnabled(True)
        self.fernetencryptFilePath.setClearButtonEnabled(True)
        self.fernetencryptFilePath.setObjectName("fernetencryptFilePath")
        self.gridLayout_2.addWidget(self.fernetencryptFilePath, 0, 1, 1, 1)
        self.verticalLayout_6.addLayout(self.gridLayout_2)
        self.gridLayout_3 = QtWidgets.QGridLayout()
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_8 = QtWidgets.QLabel(self.fernetencryptGroupBox)
        self.label_8.setObjectName("label_8")
        self.gridLayout_3.addWidget(self.label_8, 0, 0, 1, 1)
        self.fernetencryptionKeyField = QtWidgets.QLineEdit(self.fernetencryptGroupBox)
        self.fernetencryptionKeyField.setClearButtonEnabled(True)
        self.fernetencryptionKeyField.setObjectName("fernetencryptionKeyField")
        self.fernetencryptionKeyField.setEchoMode(QtWidgets.QLineEdit.Password)
        self.gridLayout_3.addWidget(self.fernetencryptionKeyField, 0, 1, 1, 1)
        self.verticalLayout_6.addLayout(self.gridLayout_3)
        self.fernetencryptButton = QtWidgets.QPushButton(self.fernetencryptGroupBox)
        self.fernetencryptButton.setFocusPolicy(QtCore.Qt.NoFocus)
        self.fernetencryptButton.setObjectName("fernetencryptButton")
        self.verticalLayout_6.addWidget(self.fernetencryptButton)
        self.fernetprogressBar = QtWidgets.QProgressBar(self.fernetencryptGroupBox)
        self.fernetprogressBar.setProperty("value", 0)
        self.fernetprogressBar.setObjectName("fernetprogressBar")
        self.verticalLayout_6.addWidget(self.fernetprogressBar)
        self.verticalLayout.addWidget(self.fernetencryptGroupBox)
        self.encryptionErrorsLabel = QtWidgets.QLabel(self.fernetEncryptionTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.encryptionErrorsLabel.sizePolicy().hasHeightForWidth())
        self.encryptionErrorsLabel.setSizePolicy(sizePolicy)
        self.encryptionErrorsLabel.setMaximumSize(QtCore.QSize(1038, 25))
        self.encryptionErrorsLabel.setText("")
        self.encryptionErrorsLabel.setObjectName("encryptionErrorsLabel")
        self.verticalLayout.addWidget(self.encryptionErrorsLabel)
        self.fernetdecryptGroupBox = QtWidgets.QGroupBox(self.fernetEncryptionTab)
        self.fernetdecryptGroupBox.setEnabled(True)
        self.fernetdecryptGroupBox.setObjectName("fernetdecryptGroupBox")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.fernetdecryptGroupBox)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.gridLayout_4 = QtWidgets.QGridLayout()
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.label_9 = QtWidgets.QLabel(self.fernetdecryptGroupBox)
        self.label_9.setObjectName("label_9")
        self.gridLayout_4.addWidget(self.label_9, 0, 0, 1, 1)
        self.fernetdecryptFilePath = QtWidgets.QLineEdit(self.fernetdecryptGroupBox)
        self.fernetdecryptFilePath.setText("")
        self.fernetdecryptFilePath.setDragEnabled(True)
        self.fernetdecryptFilePath.setClearButtonEnabled(True)
        self.fernetdecryptFilePath.setObjectName("fernetdecryptFilePath")
        self.gridLayout_4.addWidget(self.fernetdecryptFilePath, 0, 1, 1, 1)
        self.verticalLayout_9.addLayout(self.gridLayout_4)
        self.gridLayout_5 = QtWidgets.QGridLayout()
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.label_10 = QtWidgets.QLabel(self.fernetdecryptGroupBox)
        self.label_10.setObjectName("label_10")
        self.gridLayout_5.addWidget(self.label_10, 0, 0, 1, 1)
        self.fernetdecryptionKeyField = QtWidgets.QLineEdit(self.fernetdecryptGroupBox)
        self.fernetdecryptionKeyField.setClearButtonEnabled(True)
        self.fernetdecryptionKeyField.setObjectName("fernetdecryptionKeyField")
        self.fernetdecryptionKeyField.setEchoMode(QtWidgets.QLineEdit.Password)
        self.gridLayout_5.addWidget(self.fernetdecryptionKeyField, 0, 1, 1, 1)
        self.verticalLayout_9.addLayout(self.gridLayout_5)
        self.fernetdecryptButton = QtWidgets.QPushButton(self.fernetdecryptGroupBox)
        self.fernetdecryptButton.setFocusPolicy(QtCore.Qt.NoFocus)
        self.fernetdecryptButton.setObjectName("fernetdecryptButton")
        self.verticalLayout_9.addWidget(self.fernetdecryptButton)
        self.fernetprogressBar_2 = QtWidgets.QProgressBar(self.fernetdecryptGroupBox)
        self.fernetprogressBar_2.setProperty("value", 0)
        self.fernetprogressBar_2.setObjectName("fernetprogressBar_2")
        self.verticalLayout_9.addWidget(self.fernetprogressBar_2)
        self.verticalLayout.addWidget(self.fernetdecryptGroupBox)
        self.tabWidget.addTab(self.fernetEncryptionTab, "")
        self.verticalLayout_5.addWidget(self.tabWidget)

        self.convertButton.clicked.connect(self.convert_data)
        self.cipherButton.clicked.connect(self.cipher_data)
        self.decipherButton.clicked.connect(self.decipher_data)
        self.hashButton.clicked.connect(self.hash_data)
        self.encodeButton.clicked.connect(self.encode_data)
        self.decodeButton.clicked.connect(self.decode_data)
        self.fernetgenerateKeyButton.clicked.connect(self.fernet_keygen)
        self.fernetencryptButton.clicked.connect(self.fernet_encryption)
        self.fernetdecryptButton.clicked.connect(self.fernet_decryption)

        self.retranslateUi(Dialog)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Simple Python App"))
        self.convertInputField.setPlaceholderText(_translate("Dialog", "Input"))
        self.label_14.setText(_translate("Dialog", "Convert from:"))
        self.label.setText(_translate("Dialog", "Convert to:"))
        self.convertInputList.setItemText(0, _translate("Dialog", "Plaintext"))
        self.convertInputList.setItemText(1, _translate("Dialog", "Binary"))
        self.convertInputList.setItemText(2, _translate("Dialog", "Octal"))
        self.convertInputList.setItemText(3, _translate("Dialog", "Decimal"))
        self.convertInputList.setItemText(4, _translate("Dialog", "Hexadecimal"))
        self.convertOutputList.setItemText(0, _translate("Dialog", "Plaintext"))
        self.convertOutputList.setItemText(1, _translate("Dialog", "Binary"))
        self.convertOutputList.setItemText(2, _translate("Dialog", "Octal"))
        self.convertOutputList.setItemText(3, _translate("Dialog", "Decimal"))
        self.convertOutputList.setItemText(4, _translate("Dialog", "Hexadecimal"))
        self.convertButton.setText(_translate("Dialog", "Convert"))
        self.convertOutputField.setPlaceholderText(_translate("Dialog", "Output"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.convertTab), _translate("Dialog", "Conversion"))
        self.cipherInputField.setPlaceholderText(_translate("Dialog", "Input"))
        self.label_2.setText(_translate("Dialog", "Use:"))
        self.cipherList.setItemText(0, _translate("Dialog", "ROT13"))
        self.cipherList.setItemText(1, _translate("Dialog", "ROT47"))
        self.cipherList.setItemText(2, _translate("Dialog", "Caesar Cipher"))
        self.cipherList.setItemText(3, _translate("Dialog", "Morse Code"))
        self.cipherList.setItemText(4, _translate("Dialog", "Bacon Cipher (complete version)"))
        self.cipherList.setItemText(5, _translate("Dialog", "Super Cipher"))
        self.label_12.setText(_translate("Dialog", "Key:"))
        self.cipherKeyField.setPlaceholderText(_translate("Dialog", "Only when needed"))
        self.cipherButton.setText(_translate("Dialog", "Cipher"))
        self.decipherButton.setText(_translate("Dialog", "Decipher"))
        self.cipherOutputField.setPlaceholderText(_translate("Dialog", "Output"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.cipherTab), _translate("Dialog", "Cipher"))
        self.hashInputField.setPlaceholderText(_translate("Dialog", "Input"))
        self.hashFileLabel.setText(_translate("Dialog", "Or specify a file path:"))
        self.hashFilePath.setPlaceholderText(_translate("Dialog", "e.g. /home/user/file"))
        self.label_4.setText(_translate("Dialog", "Use:"))
        self.hashList.setItemText(0, _translate("Dialog", "MD5"))
        self.hashList.setItemText(1, _translate("Dialog", "SHA-256"))
        self.hashList.setItemText(2, _translate("Dialog", "SHA-384"))
        self.hashList.setItemText(3, _translate("Dialog", "SHA-512"))
        self.hashList.setItemText(4, _translate("Dialog", "SHA-3-256"))
        self.hashList.setItemText(5, _translate("Dialog", "SHA-3-384"))
        self.hashList.setItemText(6, _translate("Dialog", "SHA-3-512"))
        self.hashList.setItemText(7, _translate("Dialog", "BLAKE2s"))
        self.hashList.setItemText(8, _translate("Dialog", "BLAKE2b"))
        self.hashButton.setText(_translate("Dialog", "Hash"))
        self.hashOutputField.setPlaceholderText(_translate("Dialog", "Output"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.hashTab), _translate("Dialog", "Hashing"))
        self.encodeInputField.setPlaceholderText(_translate("Dialog", "Input"))
        self.encodeFileLabel.setText(_translate("Dialog", "Or specify a file path:"))
        self.encodeFilePath.setPlaceholderText(_translate("Dialog", "e.g. /home/user/inputfile"))
        self.label_5.setText(_translate("Dialog", "Use:"))
        self.encodeList.setItemText(0, _translate("Dialog", "Base16"))
        self.encodeList.setItemText(1, _translate("Dialog", "Base32"))
        self.encodeList.setItemText(2, _translate("Dialog", "Base58"))
        self.encodeList.setItemText(3, _translate("Dialog", "Base64"))
        self.encodeList.setItemText(4, _translate("Dialog", "Ascii85"))
        self.encodeList.setItemText(5, _translate("Dialog", "URL encoding"))
        self.encodeButton.setText(_translate("Dialog", "Encode"))
        self.decodeButton.setText(_translate("Dialog", "Decode"))
        self.encodeOutputField.setPlaceholderText(_translate("Dialog", "Output"))
        self.encodeOutputLineEdit.setPlaceholderText(_translate("Dialog", "e.g. /home/user/outputfile"))
        self.label_11.setText(_translate("Dialog", "Output file path:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.encodeTab), _translate("Dialog", "Encoding"))
        self.fernetencryptGroupBox.setTitle(_translate("Dialog", "Encrypt"))
        self.fernetgenerateKeyButton.setText(_translate("Dialog", "Generate random key"))
        self.label_7.setText(_translate("Dialog", "Specify a file path:"))
        self.fernetencryptFilePath.setPlaceholderText(_translate("Dialog", "e.g. /home/user/file"))
        self.label_8.setText(_translate("Dialog", "Encryption key:"))
        self.fernetencryptionKeyField.setPlaceholderText(_translate("Dialog", "Recommended: generate a random key! "))
        self.fernetencryptButton.setText(_translate("Dialog", "Encrypt"))
        self.fernetdecryptGroupBox.setTitle(_translate("Dialog", "Decrypt"))
        self.label_9.setText(_translate("Dialog", "Specify a file path:"))
        self.fernetdecryptFilePath.setPlaceholderText(_translate("Dialog", "e.g. /home/user/file"))
        self.label_10.setText(_translate("Dialog", "Decryption key:"))
        self.fernetdecryptionKeyField.setPlaceholderText(_translate("Dialog", "Apply the key!"))
        self.fernetdecryptButton.setText(_translate("Dialog", "Decrypt"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.fernetEncryptionTab), _translate("Dialog", "Encryption"))

    baconian_dictionary = {'A': 'aaaaa', 'B': 'aaaab', 'C': 'aaaba', 'D': 'aaabb', 'E': 'aabaa',
                           'F': 'aabab', 'G': 'aabba', 'H': 'aabbb',
                           'I': 'abaaa', 'J': 'abaab', 'K': 'ababa',
                           'L': 'ababb', 'M': 'abbaa', 'N': 'abbab',
                           'O': 'abbba', 'P': 'abbbb', 'Q': 'baaaa',
                           'R': 'baaab', 'S': 'baaba', 'T': 'baabb',
                           'U': 'babaa', 'V': 'babab', 'W': 'babba',
                           'X': 'babbb', 'Y': 'bbaaa', 'Z': 'bbaab'}

    morse_code_values = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.',
                         'F': '..-.', 'G': '--.', 'H': '....',
                         'I': '..', 'J': '.---', 'K': '-.-',
                         'L': '.-..', 'M': '--', 'N': '-.',
                         'O': '---', 'P': '.--.', 'Q': '--.-',
                         'R': '.-.', 'S': '...', 'T': '-',
                         'U': '..-', 'V': '...-', 'W': '.--',
                         'X': '-..-', 'Y': '-.--', 'Z': '--..',
                         '1': '.----', '2': '..---', '3': '...--',
                         '4': '....-', '5': '.....', '6': '-....',
                         '7': '--...', '8': '---..', '9': '----.',
                         '0': '-----', ', ': '--..--', '.': '.-.-.-',
                         '?': '..--..', '/': '-..-.', '-': '-....-', '+': '.-.-.',
                         '(': '-.--.', ')': '-.--.-', '!': '-.-.--', '@': ".--.-.", '&': '.-...'}

    string1 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
    uppercase_letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    lowercase_letters = 'abcdefghijklmnopqrstuvwxyz'

    def encode_data(self):
        self.encodingErrorsLabel.setText("")
        userinput = self.encodeInputField.toPlainText()
        filepath = self.encodeFilePath.text().rstrip()
        index = self.encodeList.currentIndex()
        if filepath != '' and userinput == '':
            outputfilepath = self.encodeOutputLineEdit.text().rstrip()
            self.encodeOutputField.setPlainText("")
            self.encodeOutputField.setEnabled(False)
            chunk_size = 64 * 1024
            # chunk_size -= chunk_size % 3
            encoded_format = "".encode('utf-8')
            try:
                selected_file = open(filepath, "rb")
                while True:
                    data_chunk = selected_file.read(chunk_size)
                    if not data_chunk:
                        break
                    try:
                        if index == 0:
                            encoded = b16encode(data_chunk)
                            encoded_format += encoded.lower()
                        elif index == 1:
                            encoded_format += b32encode(data_chunk)
                        elif index == 2:
                            encoded_format += b58encode(data_chunk)
                        elif index == 3:
                            encoded_format += b64encode(data_chunk)
                        elif index == 4:
                            encoded_format += b85encode(data_chunk)
                        else:
                            # selected_file.read()
                            encoded = urllib.parse.quote_plus(data_chunk)
                            encoded_format += encoded.encode('utf-8')
                    except:
                        self.encodingErrorsLabel.setText("ERROR. Check file's content format!")
                selected_file.close()

                try:
                    with open(outputfilepath, 'w') as outfile:
                        outfile.write(encoded_format.decode())
                        outfile.close()
                    self.encodingErrorsLabel.setText("Successful!")
                except:
                    self.encodingErrorsLabel.setText("ERROR. Choose an accessible path to write the output in!")
            except:
                self.encodingErrorsLabel.setText("ERROR. There's no such file, or I cannot access it!")

        elif filepath == '' and userinput != '':
            self.encodeOutputLineEdit.setText("")
            self.encodeOutputField.setEnabled(True)
            try:
                userinput = userinput.encode('utf-8')
                if index == 0:
                    encoded_format = b16encode(userinput)
                elif index == 1:
                    encoded_format = b32encode(userinput)
                elif index == 2:
                    encoded_format = b58encode(userinput)
                elif index == 3:
                    encoded_format = b64encode(userinput)
                elif index == 4:
                    encoded_format = b85encode(userinput)
                else:
                    encoded_format = urllib.parse.quote_plus(userinput)
                    encoded_format = encoded_format.encode('utf-8')
                self.encodeOutputField.setPlainText(encoded_format.decode())
            except:
                self.encodingErrorsLabel.setText("ERROR. Wrong input format!")
                self.encodeOutputField.setPlainText("")
        else:
            self.encodingErrorsLabel.setText("ERROR. Specify only one of the input methods!")
            self.encodeOutputField.setPlainText("")

    def decode_data(self):
        self.encodingErrorsLabel.setText("")
        userinput = self.encodeInputField.toPlainText()
        filepath = self.encodeFilePath.text().rstrip()
        index = self.encodeList.currentIndex()
        if filepath != '' and userinput == '':
            outputfilepath = self.encodeOutputLineEdit.text().rstrip()
            self.encodeOutputField.setPlainText("")
            self.encodeOutputField.setEnabled(False)

            chunk_size = 64 * 1024
            decoded_format = "".encode('utf-8')
            try:
                selected_file = open(filepath, "r")
                while True:
                    data_chunk = selected_file.read(chunk_size)
                    if not data_chunk:
                        break
                    try:
                        if index == 0:
                            decoded_format += b16decode(data_chunk.upper())
                        elif index == 1:
                            decoded_format += b32decode(data_chunk)
                        elif index == 2:
                            decoded_format += b58decode(data_chunk)
                        elif index == 3:
                            decoded_format += b64decode(data_chunk)
                        elif index == 4:
                            decoded_format += b85decode(data_chunk)
                        else:
                            decoded_format += urllib.parse.unquote_plus(data_chunk)
                            decoded_format = decoded_format.encode('utf-8')
                    except:
                        self.encodingErrorsLabel.setText("ERROR. Check file's content format!")
                        self.encodeOutputField.setPlainText("")
                selected_file.close()
                try:
                    with open(outputfilepath, 'w') as outfile:
                        outfile.write(decoded_format.decode())
                        outfile.close()
                    self.encodingErrorsLabel.setText("Successful!")
                except:
                    self.encodingErrorsLabel.setText("ERROR. Choose an accessible path to write the output in!")
            except:
                self.encodingErrorsLabel.setText("ERROR. There's no such file!")
                self.encodeOutputField.setPlainText("")

        elif filepath == '' and userinput != '':
            self.encodeOutputLineEdit.setText("")
            try:
                if index == 0:
                    decoded_format = b16decode(userinput)
                elif index == 1:
                    decoded_format = b32decode(userinput)
                elif index == 2:
                    decoded_format = b58decode(userinput)
                elif index == 3:
                    decoded_format = b64decode(userinput)
                elif index == 4:
                    decoded_format = b85decode(userinput)
                else:
                    userinput = userinput.decode()
                    decoded_format = urllib.parse.unquote_plus(userinput)
                    decoded_format = decoded_format.encode('utf-8')
                self.encodeOutputField.setPlainText(decoded_format.decode())
            except:
                self.encodingErrorsLabel.setText("ERROR. Wrong input format!")
                self.encodeOutputField.setPlainText("")
        else:
            self.encodingErrorsLabel.setText("ERROR. Specify only one of the input methods!")
            self.encodeOutputField.setPlainText("")

    def hash_data(self):
        self.hashingErrorsLabel.setText("")
        userinput = self.hashInputField.toPlainText().rstrip()
        filepath = self.hashFilePath.text().rstrip()
        index = self.hashList.currentIndex()

        if filepath == '' and userinput != '':
            userinput = userinput.encode('utf-8')
            hash_output = self.hashing_algorithms(userinput, index)
            self.hashOutputField.setPlainText(hash_output)
        elif filepath != '' and userinput == '':
            # buffer_size = 65536
            try:
                selected_file = open(filepath, 'rb').read()
                hash_output = self.hashing_algorithms(selected_file, index)
                self.hashOutputField.setPlainText(hash_output)
            except:
                self.hashingErrorsLabel.setText("ERROR. There's no such file!")
                self.hashOutputField.setPlainText("")
        else:
            self.hashingErrorsLabel.setText("ERROR. Specify only one of the input methods!")
            self.hashOutputField.setPlainText("")

    def hashing_algorithms(self, userinput, index):
        if index == 0:
            hash_output = md5(userinput)
        elif index == 1:
            hash_output = sha256(userinput)
        elif index == 2:
            hash_output = sha384(userinput)
        elif index == 3:
            hash_output = sha512(userinput)
        elif index == 4:
            hash_output = sha3_256(userinput)
        elif index == 5:
            hash_output = sha3_384(userinput)
        elif index == 6:
            hash_output = sha3_512(userinput)
        elif index == 7:
            hash_output = blake2s(userinput)
        else:
            hash_output = blake2b(userinput)
        return hash_output.hexdigest()

    def fernet_keygen(self):
        chars = ascii_letters + digits + punctuation
        random_chars = []
        for e in range(0, 32):
            random_chars.append(choice(chars))
        key = ''.join(random_chars)
        self.fernetshowKeyField.setText(key)

    def fernet_encryption(self):
        self.fernetdecryptFilePath.setText("")
        self.fernetdecryptionKeyField.setText("")
        self.fernetprogressBar_2.setValue(0)
        self.encryptionErrorsLabel.setText("")
        self.fernetshowKeyField.setText("")
        try:
            filepath = self.fernetencryptFilePath.text().rstrip()
            key = self.fernetencryptionKeyField.text().rstrip()
            fer = self.validate_enc_key(key)
            try:
                selected_file = open(filepath, 'rb').read()
                encrypted_file = fer.encrypt(selected_file)
                self.fernetprogressBar.setValue(38)
                sleep(0.1)
                with open(filepath, 'wb') as file:
                    file.write(encrypted_file)
                    file.close()
                self.fernetprogressBar.setValue(72)
                sleep(0.1)
                self.fernetprogressBar.setValue(100)
                self.encryptionErrorsLabel.setText("Encryption successful!")
            except:
                self.encryptionErrorsLabel.setText("ERROR. Check if the path and the key are correct!")
                self.fernetprogressBar.setValue(0)
        except:
            self.encryptionErrorsLabel.setText("ERROR. Check if you've filled all the necessary fields!")

    def fernet_decryption(self):
        self.fernetencryptFilePath.setText("")
        self.fernetencryptionKeyField.setText("")
        self.fernetprogressBar.setValue(0)
        self.fernetshowKeyField.setText("")
        self.encryptionErrorsLabel.setText("")
        try:
            filepath = self.fernetdecryptFilePath.text().rstrip()
            key = self.fernetdecryptionKeyField.text().rstrip()
            fer = self.validate_enc_key(key)
            try:
                encrypted_file = open(filepath, 'rb').read()
                decrypted_content = fer.decrypt(encrypted_file)
                self.fernetprogressBar_2.setValue(30)
                sleep(0.1)
                with open(filepath, 'wb') as decrypted_file:
                    decrypted_file.write(decrypted_content)
                    decrypted_file.close()
                self.fernetprogressBar_2.setValue(75)
                sleep(0.1)
                self.fernetprogressBar_2.setValue(100)
                self.encryptionErrorsLabel.setText("Decryption successful!")
            except:
                self.encryptionErrorsLabel.setText("ERROR. Check if the path and the key are correct!")
                self.fernetprogressBar_2.setValue(0)
        except:
            self.encryptionErrorsLabel.setText("ERROR. Check if you've filled all the necessary fields!")

    def validate_enc_key(self, key):
        key = list(key)
        if len(key) < 32:
            for i in range(32 - len(key)):
                key.append(key[i % len(key)])
        else:
            pass
        key = ''.join(key)
        key = b64encode(key.encode('utf-8'))
        fer = Fernet(key)
        return fer

    def convert_data(self):
        self.conversionErrorsLabel.setText("")
        userinput = self.convertInputField.toPlainText().rstrip()
        index_from = self.convertInputList.currentIndex()
        index_to = self.convertOutputList.currentIndex()
        input_array = userinput.split()
        try:
            if index_from == 0:
                input_to_binary = ' '.join(format(ord(i), '08b') for i in userinput).rstrip()
                binary_array = input_to_binary.split()
                lst = ['0b' * (9 - len(i)) + i for i in binary_array]
                if index_to == 0:
                    self.convertOutputField.setPlainText(userinput)
                elif index_to == 1:
                    result = input_to_binary
                elif index_to == 2:
                    octal_array = []
                    for e in lst:
                        octal_array.append(oct(int(e, 2))[2:])
                    result = ' '.join(octal_array)
                elif index_to == 3:
                    decimal_array = []
                    for e in lst:
                        decimal_array.append(str(int(e, 2)))
                    result = ' '.join(decimal_array)
                else:
                    hex_array = []
                    for e in lst:
                        hex_array.append(hex(int(e, 2))[2:])
                    result = ' '.join(hex_array)
                self.convertOutputField.setPlainText(result)
            elif index_from == 1:
                binary_array = [i.zfill(8) for i in input_array]
                if index_to == 0:
                    result = ''
                    for e in binary_array:
                        result += chr(int(e, 2))
                elif index_to == 1:
                    self.convertOutputField.setPlainText(userinput)
                elif index_to == 2:
                    octal_array = []
                    for e in binary_array:
                        octal_array.append(oct(int(e, 2))[2:])
                    result = ' '.join(octal_array)
                elif index_to == 3:
                    decimal_array = []
                    for e in binary_array:
                        decimal_array.append(str(int(e, 2)))
                    result = ' '.join(decimal_array)
                else:
                    hex_array = []
                    for e in binary_array:
                        hex_array.append(hex(int(e, 2))[2:])
                    result = ' '.join(hex_array)
                self.convertOutputField.setPlainText(result)
            elif index_from == 2:
                if index_to == 0:
                    result = ""
                    for e in input_array:
                        result += chr(int(e, 8))
                elif index_to == 1:
                    bin_array = []
                    for e in input_array:
                        bin_array.append(bin(int(e, 8))[2:])
                    result_array = [i.zfill(8) for i in bin_array]
                    result = ' '.join(result_array)
                elif index_to == 2:
                    self.convertOutputField.setPlainText(userinput)
                elif index_to == 3:
                    decimal_array = []
                    for e in input_array:
                        decimal_array.append(str(int(e, 8)))
                    result = ' '.join(decimal_array)
                else:
                    hex_array = []
                    for e in input_array:
                        hex_array.append(hex(int(e, 8))[2:])
                    result = ' '.join(hex_array)
                self.convertOutputField.setPlainText(result)
            elif index_from == 3:
                if index_to == 0:
                    result = ""
                    for e in input_array:
                        result += chr(int(e))
                elif index_to == 1:
                    bin_array = []
                    for e in input_array:
                        bin_array.append(bin(int(e))[2:])
                    result_array = [i.zfill(8) for i in bin_array]
                    result = ' '.join(result_array)
                elif index_to == 2:
                    octal_array = []
                    for e in input_array:
                        octal_array.append(oct(int(e))[2:])
                    result = ' '.join(octal_array)
                elif index_to == 3:
                    self.convertOutputField.setPlainText(userinput)
                else:
                    hex_array = []
                    for e in input_array:
                        hex_array.append(hex(int(e))[2:])
                    result = ' '.join(hex_array)
                self.convertOutputField.setPlainText(result)
            elif index_from == 4:
                if index_to == 0:
                    result = ""
                    for e in input_array:
                        result += chr(int(e, 16))
                elif index_to == 1:
                    bin_array = []
                    for e in input_array:
                        bin_array.append(bin(int(e, 16))[2:])
                    result_array = [i.zfill(8) for i in bin_array]
                    result = ' '.join(result_array)
                elif index_to == 2:
                    octal_array = []
                    for e in input_array:
                        octal_array.append(oct(int(e, 16))[2:])
                    result = ' '.join(octal_array)
                elif index_to == 4:
                    self.convertOutputField.setPlainText(userinput)
                else:
                    decimal_array = []
                    for e in input_array:
                        decimal_array.append(str(int(e, 16)))
                    result = ' '.join(decimal_array)
                self.convertOutputField.setPlainText(result)
        except:
            self.conversionErrorsLabel.setText("ERROR. Maybe the input format is wrong, or you selected the same"
                                               " format to convert to!")
            self.convertOutputField.setPlainText("")

    def cipher_data(self):
        self.cipherErrorsLabel.setText("")
        userinput = self.cipherInputField.toPlainText().rstrip()
        index = self.cipherList.currentIndex()
        key = self.cipherKeyField.text().rstrip()
        try:
            if index == 0:
                try:
                    string2 = 'NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm'
                    translation = str.maketrans(self.string1, string2)
                    self.cipherOutputField.setPlainText(userinput.translate(translation))
                except:
                    self.cipherErrorsLabel.setText("ERROR. Something went wrong!")
                    self.cipherOutputField.setPlainText("")
            elif index == 1:
                try:
                    string1 = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
                    string2 = 'PQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~!"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNO'
                    translation = str.maketrans(string1, string2)
                    self.cipherOutputField.setPlainText(userinput.translate(translation))
                except:
                    self.cipherErrorsLabel.setText("ERROR. Something went wrong!")
                    self.cipherOutputField.setPlainText("")
            elif index == 2:
                try:
                    cipher = ''
                    for e in userinput:
                        if e in self.uppercase_letters:
                            cipher += chr((ord(e) + int(key) - 65) % 26 + 65)
                        elif e in self.lowercase_letters:
                            cipher += chr((ord(e) + int(key) - 97) % 26 + 97)
                        else:
                            cipher += str(e)
                    self.cipherOutputField.setPlainText(cipher)
                except:
                    self.cipherErrorsLabel.setText("ERROR. A key is required and it should be an integer!")
                    self.cipherOutputField.setPlainText("")
            elif index == 3:
                try:
                    morse_cipher = []
                    userinput_capitalised = userinput.upper()
                    for e in userinput_capitalised:
                        if e != ' ':
                            morse_cipher.append(self.morse_code_values[e])
                        else:
                            morse_cipher.append('/')
                    result = ' '.join(morse_cipher)
                    self.cipherOutputField.setPlainText(result)
                except:
                    self.cipherErrorsLabel.setText("ERROR. Wrong input format!")
                    self.cipherOutputField.setPlainText("")
            elif index == 4:
                try:
                    user_input = userinput.upper()
                    baconian_cipher = []
                    for e in user_input:
                        if e == ' ':
                            pass
                        else:
                            baconian_cipher.append(self.baconian_dictionary[e])
                    self.cipherOutputField.setPlainText(' '.join(baconian_cipher))
                except:
                    self.cipherErrorsLabel.setText("ERROR. Some of those characters cannot be ciphered with this algorithm!")
                    self.cipherOutputField.setPlainText("")
            else:
                try:
                    ciphered_text = []
                    userinput, key = self.supercipherKey(userinput, key)
                    for i in range(len(userinput)):
                        x = 0
                        if userinput[i].isalpha():
                            x = (ord(userinput[i]) + ord(key[i])) % 26
                            x += ord('A')
                        else:
                            x += ord(userinput[i])
                        ciphered_text.append(chr(x))
                    result = ''.join(ciphered_text)
                    self.cipherOutputField.setPlainText(result.lower())
                except:
                    self.cipherErrorsLabel.setText("ERROR. Key should be a string of characters!")
                    self.cipherOutputField.setPlainText("")
        except:
            self.cipherErrorsLabel.setText("ERROR. Wrong input format!")
            self.cipherOutputField.setPlainText("")

    def decipher_data(self):
        self.cipherErrorsLabel.setText("")
        userinput = self.cipherInputField.toPlainText().rstrip()
        index = self.cipherList.currentIndex()
        key = self.cipherKeyField.text().rstrip()
        if index == 0:
            try:
                string2 = 'NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm'
                translation = str.maketrans(self.string1, string2)
                self.cipherOutputField.setPlainText(userinput.translate(translation))
            except:
                self.cipherErrorsLabel.setText("ERROR. Something went wrong!")
                self.cipherOutputField.setPlainText("")
        elif index == 1:
            try:
                string1 = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
                string2 = 'PQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~!"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNO'
                translation = str.maketrans(string2, string1)
                self.cipherOutputField.setPlainText(userinput.translate(translation))
            except:
                self.cipherErrorsLabel.setText("ERROR. Something went wrong!")
                self.cipherOutputField.setPlainText("")
        elif index == 2:
            decipher = ''
            try:
                for e in userinput:
                    if e in self.uppercase_letters:
                        decipher += chr((ord(e) - int(key) - 65) % 26 + 65)
                    elif e in self.lowercase_letters:
                        decipher += chr((ord(e) - int(key) - 97) % 26 + 97)
                    else:
                        decipher += str(e)
                self.cipherOutputField.setPlainText(decipher)
            except:
                self.cipherErrorsLabel.setText("ERROR. Make sure the key and the "
                                               "input are given in a proper format!")
                self.cipherOutputField.setPlainText("")
        elif index == 3:
            try:
                morse_decipher = []
                morse_cipher = userinput.split()
                for e in morse_cipher:
                    for key, value in self.morse_code_values.items():
                        if value == e:
                            morse_decipher.append(key)
                    if e == "/":
                        morse_decipher.append(' ')
                result = ''.join(morse_decipher)
                self.cipherOutputField.setPlainText(result.lower())
            except:
                self.cipherErrorsLabel.setText("ERROR. Wrong input format!")
                self.cipherOutputField.setPlainText("")
        elif index == 4:
            try:
                baconian_decipher = []
                baconian_cipher = userinput.split()
                baconian_cipher = ''.join(baconian_cipher)
                n = 5
                formatted_input = [baconian_cipher[i:i+n] for i in range(0, len(baconian_cipher), n)]
                for e in formatted_input:
                    for key, value in self.baconian_dictionary.items():
                        if value == e:
                            baconian_decipher.append(key)
                        elif e == " ":
                            baconian_decipher.append(e)
                result = ''.join(baconian_decipher)
                self.cipherOutputField.setPlainText(result)
            except:
                self.cipherErrorsLabel.setText("ERROR. Only sets of 5 are allowed!")
                self.cipherOutputField.setPlainText("")
        else:
            try:
                deciphered_text = []
                userinput, key = self.supercipherKey(userinput, key)
                for i in range(len(userinput)):
                    x = 0
                    if userinput[i].isalpha():
                        x = (ord(userinput[i]) - ord(key[i]) + 26) % 26
                        x += ord('A')
                    else:
                        x += ord(userinput[i])
                    deciphered_text.append(chr(x))
                result = ''.join(deciphered_text)
                self.cipherOutputField.setPlainText(result.lower())
            except:
                self.cipherErrorsLabel.setText("ERROR. Key should be a string of characters!")
                self.cipherOutputField.setPlainText("")

    def supercipherKey(self, userinput, key):
        userinput = userinput.upper()
        key = list(key)
        if len(userinput) != len(key):
            for i in range(len(userinput) - len(key)):
                key.append(key[i % len(key)])
            key = ''.join(key)
        else:
            key = ''.join(key)
        return userinput, key


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
